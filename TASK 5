import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    private String code;
    private String title;
    private String description;
    private int capacity;
    private String schedule;
    private int enrolledStudents;

    public Course(String code, String title, String description, int capacity, String schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = 0;
    }

    public String getCode() {
        return code;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public String getSchedule() {
        return schedule;
    }

    public int getEnrolledStudents() {
        return enrolledStudents;
    }

    public void enrollStudent() {
        if (enrolledStudents < capacity) {
            enrolledStudents++;
        } else {
            System.out.println("Cannot enroll student: capacity full.");
        }
    }

    public void removeStudent() {
        if (enrolledStudents > 0) {
            enrolledStudents--;
        } else {
            System.out.println("No students to remove.");
        }
    }
}

class Student {
    private int id;
    private String name;
    private List<Course> courses;

    public Student(int id, String name) {
        this.id = id;
        this.name = name;
        this.courses = new ArrayList<>();
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Course> getCourses() {
        return courses;
    }

    public void registerCourse(Course course) {
        if (!courses.contains(course)) {
            if (course.getEnrolledStudents() < course.getCapacity()) {
                courses.add(course);
                course.enrollStudent();
                System.out.println(name + " has successfully registered for " + course.getCode());
            } else {
                System.out.println("Sorry, " + course.getCode() + " is already full.");
            }
        } else {
            System.out.println(name + " is already registered for " + course.getCode());
        }
    }

    public void dropCourse(Course course) {
        if (courses.contains(course)) {
            courses.remove(course);
            course.removeStudent();
            System.out.println(name + " has dropped " + course.getCode());
        } else {
            System.out.println(name + " is not registered for " + course.getCode());
        }
    }
}

public class CourseRegistrationSystem {
    private static List<Course> courses = new ArrayList<>();
    private static List<Student> students = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        populateCourses();
        menu();
    }

    private static void populateCourses() {
        courses.add(new Course("CSCI101", "Introduction to Computer Science", "Introduction to programming and computer science concepts.", 30, "Monday/Wednesday 10:00 AM - 11:30 AM"));
        courses.add(new Course("MATH201", "Calculus I", "Introduction to differential and integral calculus.", 25, "Tuesday/Thursday 9:00 AM - 10:30 AM"));
        courses.add(new Course("ENG101", "English Composition", "Developing writing skills and critical thinking.", 35, "Monday/Wednesday/Friday 1:00 PM - 2:30 PM"));

        // Adding some students for demonstration purposes
        students.add(new Student(1, "Alice"));
        students.add(new Student(2, "Bob"));
    }

    private static void menu() {
        while (true) {
            System.out.println("\nCourse Registration System Menu:");
            System.out.println("1. View Course Listing");
            System.out.println("2. Register for Course");
            System.out.println("3. Drop Course");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    displayCourseListing();
                    break;
                case 2:
                    registerCourse();
                    break;
                case 3:
                    dropCourse();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void displayCourseListing() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses) {
            System.out.println("Code: " + course.getCode());
            System.out.println("Title: " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Schedule: " + course.getSchedule());
            System.out.println("Capacity: " + course.getEnrolledStudents() + "/" + course.getCapacity());
            System.out.println();
        }
    }

    private static void registerCourse() {
        System.out.print("Enter student ID: ");
        int studentId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter course code to register: ");
        String courseCode = scanner.nextLine().toUpperCase();

        Student student = findStudentById(studentId);
        Course course = findCourseByCode(courseCode);

        if (student == null) {
            System.out.println("Student with ID " + studentId + " not found.");
        } else if (course == null) {
            System.out.println("Course with code " + courseCode + " not found.");
        } else {
            student.registerCourse(course);
        }
    }

    private static void dropCourse() {
        System.out.print("Enter student ID: ");
        int studentId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter course code to drop: ");
        String courseCode = scanner.nextLine().toUpperCase();

        Student student = findStudentById(studentId);
        Course course = findCourseByCode(courseCode);

        if (student == null) {
            System.out.println("Student with ID " + studentId + " not found.");
        } else if (course == null) {
            System.out.println("Course with code " + courseCode + " not found.");
        } else {
            student.dropCourse(course);
        }
    }

    private static Student findStudentById(int id) {
        for (Student student : students) {
            if (student.getId() == id) {
                return student;
            }
        }
        return null;
    }

    private static Course findCourseByCode(String code) {
        for (Course course : courses) {
            if (course.getCode().equals(code)) {
                return course;
            }
        }
        return null;
    }
}
